generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Room {
  id              String   @id @default(uuid())
  name            String
  hostId          String
  host            User     @relation("HostedRooms", fields: [hostId], references: [id])
  roomCode        String   @unique
  autoJoinEnabled Boolean  @default(false)
  createdAt       DateTime @default(now())

  participants        Participant[] // Users joined
  networkFingerprints NetworkFingerprint[] // Auto-join based on Wi-Fi
  messages            Message[] // In-room chat/messages
}

model Participant {
  id       String   @id @default(uuid())
  userId   String
  user     User     @relation(fields: [userId], references: [id])
  roomId   String
  room     Room     @relation(fields: [roomId], references: [id])
  joinedAt DateTime @default(now())

  isMuted   Boolean @default(false)
  isVideoOn Boolean @default(true)

  @@unique([userId, roomId]) // Prevent duplicate joins
}

model Message {
  id        String   @id @default(uuid())
  content   String
  senderId  String
  sender    User     @relation(fields: [senderId], references: [id])
  roomId    String
  room      Room     @relation(fields: [roomId], references: [id])
  timestamp DateTime @default(now())
}

model NetworkFingerprint {
  id              String   @id @default(uuid())
  fingerprintHash String
  roomId          String
  room            Room     @relation(fields: [roomId], references: [id])
  createdAt       DateTime @default(now())

  @@unique([fingerprintHash, roomId])
}

model User {
  id       String @id @default(uuid())
  email    String @unique
  password String
  name     String

  hostedRooms    Room[]        @relation("HostedRooms")
  messages       Message[]
  participations Participant[]
}
